Search in BST(Binary search tree)

Java
Intuition

1. Starting from the root, continuously compare the key value with the current node’s value, traverse to left or right based on these comparisons.

2. If the current node's value matches the target value, the algorithm stops and returns that node.

3. Otherwise, it moves down the tree, choosing the left or right child depending on whether the target value is smaller or larger than the current node's value, respectively.

4. This process continues until either the target value is found within a node or the algorithm reaches a nullptr node, indicating that the value is not present in the BST.
Approach

Step 1:Start at the root of the Binary Search Tree.

Step 2: While the current node is not null and the current node’s value is not equal to the key recursively travel the tree by:

If the target value is less than the current node’s value, move to the left child as smaller values are on the left subtree in the BST.
If the target value is greater than the current node’s value, move to the right child as larger values are on the right subtree in the BST.

Step 3: Return the current node if it contains the target value, or NULL if the value is not found in the BST.
Complexity

    Time complexity:

O(log2N) where N is the number of nodes in the Binary Search Tree. In the best case scenario, where the tree is balanced, the time complexity is the height of the tree ie. log2N. In the worst-case scenario, where the tree is degenerate (linear), the time complexity becomes O(n), as it would require traversing all nodes along the path from the root to the leaf.

Space Complexity: O(1) since the algorithm does not use any additional space or data structures. The algorithm does use auxiliary stack space from recursion. In the average and worst-case scenarios, the space complexity for recursive stack space is O(h), where 'h' represents the height of the tree.
Code

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        while (root != null && root.val != val) {
            // Check if the target value is
            // less than the current node's value.
            // If so, move to the left subtree
            // (values smaller than the current node).
            // Otherwise, move to the right subtree
            // (values larger than the current node).
            root = val < root.val ? root.left : root.right;
        }
        // Return the node containing the target value,
        // if found; otherwise, return null.
        return root;
    }
}
