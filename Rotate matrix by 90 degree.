Optimal approach .
T.c:-O(N^2)
S.c:-O(1) Because no extra matrix has been used to solve the problem.

Code using java:-


import java.util.*;
class solution {
    static void rotate(int[][] matrix) {
      //Reverse the matrix
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix[0].length; j++) {
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
      //Transpose the matrix
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix.length / 2; j++) {
                int temp = 0;
                temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix.length - 1 - j];
                matrix[i][matrix.length - 1 - j] = temp;
            }
        }
    }

    public static void main(String args[]) {
        int arr[][] =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        rotate(arr);
        System.out.println("Rotated Image");
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }

    }
}
--Lavlesh Singh Rajput.
LinkdeIn-->https://www.linkedin.com/in/lavleshsingh

In the given problem to rotate matrix by 90 degree the solution and approach that i have used is to first transpose the matrix(means change column by row(column-->row) && (row-->column) using some conditions and swap method.
And after transposing the array reverse the array to get the rotated matrix by 90 degree. Code //for same is given above in the file 
