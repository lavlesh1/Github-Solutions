Java
Generated from the chosen submission
Intuition

Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.
Approach

We will reduce the search length. This can be done by searching the length of the shorter linked list. How? Letâ€™s see the process.

Find the length of both lists.
Find the positive difference between these lengths.
Move the dummy pointer of the larger list by the difference achieved. This makes our search length reduced to a smaller list length.
Move both pointers, each pointing two lists, ahead simultaneously if both do not collide.

The difference of length method requires various steps to work on it. Using the same concept of difference of length, a different approach can be implemented. The process is as follows:-

Take two dummy nodes for each list. Point each to the head of the lists.
Iterate over them. If anyone becomes null, point them to the head of the opposite lists and continue iterating until they collide.

Complexity

    Time complexity:

O(2*max(length of list1,length of list2))

Reason: Uses the same concept of the difference of lengths of two lists.

    Space complexity:

O(1)
Code

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    class Node {
        int num;
        Node next;
        Node(int val) {
            num = val;
            next = null;
        }
}
/*static ListNode insertNode(ListNode head,int val) {
    ListNode newNode = new ListNode(val);
    
    if(head == null) {
        head = newNode;
        return head;
    }
    
    ListNode temp = head;
    while(temp.next != null) temp = temp.next;
    
    temp.next = newNode;
    return head;
}
*/

    public ListNode getIntersectionNode(ListNode head1, ListNode head2) {
        if (head1==null||head2==null){return null;}

        ListNode t1 = head1;
        ListNode t2 = head2;
    
    while(t1 != t2) {
        //d1 = d1 == null? head2:d1.next;
        //d2 = d2 == null? head1:d2.next;
        t1=t1.next;
        t2=t2.next;
        if(t1==t2){
            return t1;
        }
        if(t1==null){
            t1= head2;
        }
        if(t2==null){
            t2= head1;
        }

    }
    
    return t1;
    }
