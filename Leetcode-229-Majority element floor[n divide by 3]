Leetcode:- Problem no:-229
Problem is to find majority elements in an array that appears in the array more than floor value of (n / 3).

Brute force--->
approach for the problem is bit easier iterate through entire array check for all tha values of the array and compare them with the >floor(n / 3) value.
Intialize a count is equal to zero and after each appearance of the no increase count after successfull operations compare them with floor(n /3) value and add them in a list.
T.c--> O(N^2)
S.c-->O(1)

Better approach--->
for the same will be using hash map function to solve the problem .
In hash map function what we do is create a container a store (key,value) in them and then iterate through the hash map fuction and get the answer . Here in the prblem key is Number and value is its their count.
T.C-->O(N)*O(logN)--> for iterating through entire array then through the hash mapp that will logarithm of N.(NLogN)
S.C-->O(N)-->we have creating a hash mapp to store the key and value so extra space is needed.

Optimal Approach--->
Moore's voting algortithm or we can say majority element where n=n/2;
So, the approach is quite bit simple we will first intialize two count , count 1 & 2 equals to zero and then intialize teo element , element 1&2;
after that iterate through entire array run following code to get the ans.
If the array contains the majority of elements, their occurrence must be greater than the floor(N/3). Now, we can say that the count of minority elements and majority elements is equal up to a certain point in the array.
So when we traverse through the array we try to keep track of the counts of elements and the elements themselves for which we are tracking the counts. 
After traversing the whole array, we will check the elements stored in the variables. Then we need to check if the stored elements are the majority elements or not by manually checking their counts.


Code In JAVA



class Solution {
    public static List<Integer> majorityElement(int[] v) {
        int n = v.length; //size of the array

        int cnt1 = 0, cnt2 = 0; // counts
        int el1 = Integer.MIN_VALUE; // element 1
        int el2 = Integer.MIN_VALUE; // element 2

        // applying the Extended Boyer Moore's Voting Algorithm:
        for (int i = 0; i < n; i++) {
            if (cnt1 == 0 && el2 != v[i]) {
                cnt1 = 1;
                el1 = v[i];
            } else if (cnt2 == 0 && el1 != v[i]) {
                cnt2 = 1;
                el2 = v[i];
            } else if (v[i] == el1) cnt1++;
            else if (v[i] == el2) cnt2++;
            else {
                cnt1--; cnt2--;
            }
        }

        List<Integer> ls = new ArrayList<>(); // list of answers

        // Manually check if the stored elements in
        // el1 and el2 are the majority elements:
        cnt1 = 0; cnt2 = 0;
        for (int i = 0; i < n; i++) {
            if (v[i] == el1) cnt1++;
            if (v[i] == el2) cnt2++;
        }

        int mini = (int)(n / 3) + 1;
        if (cnt1 >= mini) ls.add(el1);
        if (cnt2 >= mini) ls.add(el2);

        // Uncomment the following line
        // if it is told to sort the answer array:
        //Collections.sort(ls); //TC --> O(2*log2) ~ O(1);

        return ls;
    }

    public static void main(String args[]) {
        int[] arr = {11, 33, 33, 11, 33, 11};
        List<Integer> ans = majorityElement(arr);
        System.out.print("The majority elements are: ");
        for (int i = 0; i < ans.size(); i++) {
            System.out.print(ans.get(i) + " ");
        }
        System.out.println();
    }
}
Time complexity:--Time Complexity: O(N) + O(N), where N = size of the given array.
Reason: The first O(N) is to calculate the counts and find the expected majority elements. The second one is to check if the calculated elements are the majority ones or not.
S.c-->O(1)because no extra space is been used to store the answer or solve the problem.



