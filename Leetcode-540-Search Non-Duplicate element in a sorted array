Leetcode:- 540(Easy)
Intuition

We are going to use the Binary Search algorithm to optimize the approach.
Objective of the Binary Search algorithm is to efficiently determine the appropriate half to eliminate, thereby reducing the search space by half. It does this by determining a specific condition that ensures that the target is not present in that half.

How to check if arr[mid] i.e. the current element is the single element:
-->if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1].
Here's the content sorted in 7 lines:

    If n == 1: This means the array size is 1. If the array contains only one element, we will return that element only.
    If arr[0] != arr[1]: This means the very first element of the array is the single element. So, we will return arr[0].
    If arr[n-1] != arr[n-2]: This means the last element of the array is the single element. So, we will return arr[n-1].
    If (i % 2 == 0 and arr[i] == arr[i+1]) or (i%2 == 1 and arr[i] == arr[i-1]), we are in the left half.
    If (i % 2 == 0 and arr[i] == arr[i-1]) or (i%2 == 1 and arr[i] == arr[i+1]), we are in the right half.
    If we are in the left half of the single element, we have to eliminate this left half (i.e. low = mid+1). Because our single element appears somewhere on the right side.
    If we are in the right half of the single element, we have to eliminate this right half (i.e. high = mid-1). Because our single element appears somewhere on the left side.

Approach

If n == 1: This means the array size is 1. If the array contains only one element, we will return that element only.
If arr[0] != arr[1]: This means the very first element of the array is the single element. So, we will return arr[0].
If arr[n-1] != arr[n-2]: This means the last element of the array is the single element. So, we will return arr[n-1].
Place the 2 pointers i.e. low and high: Initially, we will place the pointers excluding index 0 and n-1 like this: low will point to index 1, and high will point to index n-2 i.e. the second last index.
Calculate the ‘mid’: Now, inside a loop, we will calculate the value of ‘mid’ using the following formula:
mid = (low+high) // 2 ( ‘//’ refers to integer division)
Check if arr[mid] is the single element:
If arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]: If this condition is true for arr[mid], we can conclude arr[mid] is the single element. We will return arr[mid].
If (mid % 2 == 0 and arr[mid] == arr[mid+1])
or (mid%2 == 1 and arr[mid] == arr[mid-1]): This means we are in the left half and we should eliminate it as our single element appears on the right. So, we will do this:
low = mid+1.
Otherwise, we are in the right half and we should eliminate it as our single element appears on the left. So, we will do this: high = mid-1.

Complexity

    Time complexity:

Time Complexity: O(logN), N = size of the given array.
Reason: We are basically using the Binary Search algorithm.

Space Complexity: O(1) as we are not using any extra space.

    Space complexity:

Code

class Solution {
    public int singleNonDuplicate(int[] arr) {
         int n = arr.length; // Size of the array.

        // Edge cases:
        if (n == 1)
            return arr[0];
        if (arr[0]!=arr[1])
            return arr[0];
        if (arr[n-1]!=arr[n - 2])
            return arr[n - 1];

        int low = 1, high = n - 2;
        while (low <= high) {
            int mid = (low + high) / 2;

            // If arr[mid] is the single element:
            if (arr[mid]!=arr[mid + 1] && arr[mid]!=arr[mid -1]) {
                return arr[mid];
            }

            // We are in the left:
            if ((mid % 2) == 1 && arr[mid]==arr[mid - 1]
                    || (mid % 2 == 0 && arr[mid]==arr[mid + 1])) {
                // Eliminate the left half:
                low = mid + 1;
            }
            // We are in the right:
            else {
                // Eliminate the right half:
                high = mid - 1;
            }
        }

        // Dummy return statement:
        return -1;
    }

    }
